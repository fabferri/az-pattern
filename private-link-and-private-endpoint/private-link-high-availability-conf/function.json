{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {},
  "parameters": {
    "functionAppName": {
      "type": "string",
      "defaultValue": "[format('func-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Function app."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location into which the resources should be deployed."
      }
    },
    "functionWorkerRuntime": {
      "type": "string",
      "defaultValue": "powershell",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java",
        "powershell"
      ],
      "metadata": {
        "description": "The language worker runtime to load in the function app."
      }
    },
    "functionPlanOS": {
      "type": "string",
      "defaultValue": "Windows",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "Specifies the OS used for the Azure Function hosting plan."
      }
    },
    "functionAppPlanSku": {
      "type": "string",
      "defaultValue": "EP1",
      "allowedValues": [
        "EP1",
        "EP2",
        "EP3"
      ],
      "metadata": {
        "description": "Specifies the Azure Function hosting plan SKU."
      }
    },
    "functionAppPlanName": {
      "type": "string",
      "defaultValue": "[format('plan-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Function hosting plan."
      }
    },
    "functionStorageAccountName": {
      "type": "string",
      "defaultValue": "[format('st{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the backend Azure storage account used by the Azure Function app."
      }
    },
    "use32BitWorkerProcess": {
      "type": "Bool",
      "defaultValue": true
    },
    "ftpsState": {
      "type": "String",
      "defaultValue": "FtpsOnly"
    },
    "powerShellVersion": {
      "type": "String",
      "defaultValue": "7.2"
    },
    "netFrameworkVersion": {
      "type": "string",
      "defaultValue": "v6.0"
    },
    "builtInRoleType": {
      "type": "string",
      "defaultValue": "Contributor",
      "metadata": {
        "description": "Built In Role role to be associated with System Assigned identity"
      },
      "allowedValues": [
        "Owner",
        "Contributor",
        "Reader",
        "Virtual Machine Contributor",
        "Network Contributor"
      ]
    },
    "privateDnsZoneName": {
      "type": "string",
      "defaultValue": "mydom.net"
    },
    "privateEndpointName": {
      "type": "string",
      "defaultValue": "ep",
      "metadata": {
        "description": "Specifies the name of the Private Endpoint to be created"
      }
    }

  },
  "variables": {
    "vnetConsumer": {
      "location": "[parameters('location')]",
      "name": "vnetConsumer",
      "addressSpacePrefix": "10.0.5.0/24",
      "plsSubnetName": "pe-subnet",
      "plsSubnetPrefix": "10.0.5.0/28",
      "appSubnetName": "app-subnet",
      "appSubnetPrefix": "10.0.5.16/28",
      "functionSubnetName": "func-subnet",
      "functionSubnetPrefix": "10.0.5.64/26",
      "functionPESubnetName": "func-pe-subnet",
      "functionPESubnetPrefix": "10.0.5.128/28"
    },
    "ipPrivLink": "10.0.5.4",
    "applicationInsightsName": "[format('appi-{0}', uniqueString(resourceGroup().id))]",
    "privateStorageFileDnsZoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
    "privateEndpointStorageFileName": "[format('{0}-file-private-endpoint', parameters('functionStorageAccountName'))]",
    "privateStorageTableDnsZoneName": "[format('privatelink.table.{0}', environment().suffixes.storage)]",
    "privateEndpointStorageTableName": "[format('{0}-table-private-endpoint', parameters('functionStorageAccountName'))]",
    "privateStorageBlobDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
    "privateEndpointStorageBlobName": "[format('{0}-blob-private-endpoint', parameters('functionStorageAccountName'))]",
    "privateStorageQueueDnsZoneName": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
    "privateEndpointStorageQueueName": "[format('{0}-queue-private-endpoint', parameters('functionStorageAccountName'))]",
    "functionContentShareName": "function-content-share",
    "isReserved": "[if(equals(parameters('functionPlanOS'), 'Linux'), true(), false())]",
    "role": {
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "VMContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd73bb868-a0df-4d4d-bd69-98a00b01fccb')]",
      "NetworkContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-05-01",
      "name": "[variables('vnetConsumer').name]",
      "location": "[variables('vnetConsumer').location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetConsumer').addressSpacePrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vnetConsumer').plsSubnetName]",
            "properties": {
              "addressPrefix": "[variables('vnetConsumer').plsSubnetPrefix]",
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('vnetConsumer').appSubnetName]",
            "properties": {
              "addressPrefix": "[variables('vnetConsumer').appSubnetPrefix]"
            }
          },
          {
            "name": "[variables('vnetConsumer').functionSubnetName]",
            "properties": {
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled",
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ],
              "addressPrefix": "[variables('vnetConsumer').functionSubnetPrefix]"
            }
          },
          {
            "name": "[variables('vnetConsumer').functionPESubnetName]",
            "properties": {
              "addressPrefix": "[variables('vnetConsumer').functionPESubnetPrefix]",
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateStorageFileDnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateStorageBlobDnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateStorageQueueDnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateStorageTableDnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateStorageFileDnsZoneName'), format('{0}-link', variables('privateStorageFileDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateStorageBlobDnsZoneName'), format('{0}-link', variables('privateStorageBlobDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateStorageTableDnsZoneName'), format('{0}-link', variables('privateStorageTableDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateStorageQueueDnsZoneName'), format('{0}-link', variables('privateStorageQueueDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('privateEndpointStorageFileName'), 'filePrivateDnsZoneGroup')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageFileName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('privateEndpointStorageTableName'), 'tablePrivateDnsZoneGroup')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageTableName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('privateEndpointStorageQueueName'), 'queuePrivateDnsZoneGroup')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageQueueName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-05-01",
      "name": "[variables('privateEndpointStorageFileName')]",
      "location": "[variables('vnetConsumer').location]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetConsumer').name, variables('vnetConsumer').functionPESubnetName)]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "MyStorageFilePrivateLinkConnection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
              "groupIds": [
                "file"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-05-01",
      "name": "[variables('privateEndpointStorageBlobName')]",
      "location": "[variables('vnetConsumer').location]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetConsumer').name, variables('vnetConsumer').functionPESubnetName)]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "MyStorageBlobPrivateLinkConnection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-05-01",
      "name": "[variables('privateEndpointStorageTableName')]",
      "location": "[variables('vnetConsumer').location]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetConsumer').name, variables('vnetConsumer').functionPESubnetName)]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "MyStorageTablePrivateLinkConnection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
              "groupIds": [
                "table"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-05-01",
      "name": "[variables('privateEndpointStorageQueueName')]",
      "location": "[variables('vnetConsumer').location]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetConsumer').name, variables('vnetConsumer').functionPESubnetName)]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "MyStorageQueuePrivateLinkConnection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
              "groupIds": [
                "queue"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[parameters('functionStorageAccountName')]",
      "location": "[variables('vnetConsumer').location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "publicNetworkAccess": "Disabled",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "bypass": "None",
          "defaultAction": "Deny"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/default/{1}', parameters('functionStorageAccountName'), variables('functionContentShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('vnetConsumer').location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppPlanName')]",
      "location": "[variables('vnetConsumer').location]",
      "sku": {
        "tier": "ElasticPremium",
        "name": "[parameters('functionAppPlanSku')]",
        "size": "[parameters('functionAppPlanSku')]",
        "family": "EP"
      },
      "kind": "elastic",
      "properties": {
        "maximumElasticWorkerCount": 20,
        "reserved": "[variables('isReserved')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppName')]",
      "location": "[variables('vnetConsumer').location]",
      "kind": "[if(variables('isReserved'), 'functionapp,linux', 'functionapp')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "reserved": "[variables('isReserved')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
        "siteConfig": {
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "ftpsState": "[parameters('ftpsState')]",
          "powerShellVersion": "[parameters('powerShellVersion')]",
          "vnetRouteAllEnabled": true,
          "netFrameworkVersion": "[parameters('netFrameworkVersion')]",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('functionStorageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('functionStorageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('functionContentShareName')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[parameters('functionWorkerRuntime')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~14"
            },
            {
              "name": "WEBSITE_VNET_ROUTE_ALL",
              "value": "1"
            },
            {
              "name": "WEBSITE_CONTENTOVERVNET",
              "value": "1"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageFileName'), 'filePrivateDnsZoneGroup')]",
        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageQueueName'), 'queuePrivateDnsZoneGroup')]",
        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageTableName'), 'tablePrivateDnsZoneGroup')]",
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageBlobDnsZoneName'), format('{0}-link', variables('privateStorageBlobDnsZoneName')))]",
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageFileDnsZoneName'), format('{0}-link', variables('privateStorageFileDnsZoneName')))]",
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageQueueDnsZoneName'), format('{0}-link', variables('privateStorageQueueDnsZoneName')))]",
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageTableDnsZoneName'), format('{0}-link', variables('privateStorageTableDnsZoneName')))]",
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default/{1}', parameters('functionStorageAccountName'), variables('functionContentShareName')), '/')[0], split(format('{0}/default/{1}', parameters('functionStorageAccountName'), variables('functionContentShareName')), '/')[1], split(format('{0}/default/{1}', parameters('functionStorageAccountName'), variables('functionContentShareName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/networkConfig",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
      "properties": {
        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetConsumer').name, variables('vnetConsumer').functionSubnetName)]",
        "swiftSupported": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetConsumer').name)]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2021-04-01-preview",
      "name": "[guid(resourceId('Microsoft.Resources/resourceGroups', resourceGroup().name) )]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2019-08-01', 'Full').identity.principalId]"
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[parameters('privateDnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[concat(parameters('privateDnsZoneName'), '/',parameters('privateEndpointName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
      ],
      "properties": {
        "ttl": 5,
        "aRecords": [
          {
            "ipv4Address": "[variables('ipPrivLink')]"
          }
        ]
      }
    }
  ],
  "outputs": {
    "principalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2019-08-01', 'Full').identity.principalId]"
    }
  }
}