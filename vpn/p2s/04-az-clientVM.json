{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the Azure location where the key vault should be created."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "vnet1-client",
      "metadata": {
        "description": "Name of the VNet."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "metadata": {
        "description": "virtual machine size"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "admin username for the VM"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "administrator password for the VM"
      }
    },
    "_artifactsLocationSasToken": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation. When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      }
    },
    "_artifactsLocation": {
      // "defaultValue": "[deployment().properties.templateLink.uri]",
      "defaultValue": "https://raw.githubusercontent.com/fabferri/az-pattern/master/00-scripts/",
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "clientCertSeq": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "name selection of client certificate. it is a integer number [1,2,3,...]"
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "clientVM",
      "metadata": {
        "description": "VM name"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('stg',uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Storage account name the MSI will be given access to"
      }
    },
    "storageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group name for the storage account role assignment"
      }
    },
    "msiRole": {
      "type": "string",
      "defaultValue": "StorageAccountContributor",
      "allowedValues": [
        "StorageAccountContributor",
        "StorageBlobDataContributor",
        "StorageBlobDataOwner",
        "StorageBlobDataReader"
      ],
      "metadata": {
        "description": "Role to assign to the MSI on the storage account"
      }
    }
  },
  "variables": {
    "vnet": {
      "location": "[parameters('location')]",
      "name": "[parameters('vnetName')]",
      "addressSpacePrefix": "100.64.0.0/24",
      "client1SubnetName": "workerSubnet",
      "client1SubnetPrefix": "100.64.0.0/27"
    },
    "win2022": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2022-Datacenter",
      "license": "Windows_Server"
    },
    "win11": {
      "publisher": "microsoftwindowsdesktop",
      "offer": "windows-11",
      "sku": "win11-23h2-ent",
      "license": "Windows_Client"
    },
    "OS": {
      "publisher": "[variables('win11').publisher]",
      "offer": "[variables('win11').offer]",
      "sku": "[variables('win11').sku]",
      "license": "[variables('win11').license]"
    },

    "vmName": "[parameters('vmName')]",
    "workerPrivateIPAddress": "100.64.0.10",
    "vmNicName": "[concat(variables('vmName'),'-NIC')]",
    "vmPubIPName": "[concat(variables('vmName'),'-pubIP')]",
    "vmNSGName": "[concat(variables('vmName'),'-nsg')]",
    "scriptFileName": "downloadClientCert.ps1",
    //"scriptExe": "[concat(variables('scriptFileName'),' -User1 ', parameters('user1Name'), ' -Pass1 ',parameters('user1Password'),' -User2 ', parameters('user2Name'), ' -Pass2 ', parameters('user2Password'))]",
    //"scriptExe": "[concat(variables('scriptFileName'))]",
    //"scriptExe": "[concat(variables('scriptFileName'),' -adminUsername ', parameters('adminUsername'),' -adminPassword ', parameters('adminPassword'),' -clientCertSeq ', parameters('clientCertSeq') )]",
    "scriptExe": "[concat(variables('scriptFileName'),' -clientCertSeq ', parameters('clientCertSeq') )]",
    "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('scriptFileName'), parameters('_artifactsLocationSasToken')))]",
    "roleDefinitionId": {
      "StorageAccountContributor": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
      "StorageBlobDataContributor": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
      "StorageBlobDataOwner": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
      "StorageBlobDataReader": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]"
    },
    "storageContainerName": "cert1"

  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-11-01",
      "name": "[variables('vnet').name]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnet').addressSpacePrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vnet').client1SubnetName]",
            "properties": {
              "addressPrefix": "[variables('vnet').client1SubnetPrefix]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2022-11-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('vmNSGName')]",
      "location": "[parameters('location')]",
      "comments": "network security rule",
      "properties": {
        "securityRules": [
          {
            "name": "RDP-rule",
            "properties": {
              "description": "allow RDP-inbound",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2022-11-01",
      "name": "[variables('vmPubIPName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-11-01",
      "name": "[variables('vmNicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet').name)]",
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('vmPubIPName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmNSGName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "WorkerIPConfiguration",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet').name, variables('vnet').client1SubnetName)]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('workerPrivateIPAddress')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('vmPubIPName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmNSGName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-03-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNicName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('OS').publisher]",
            "offer": "[variables('OS').offer]",
            "sku": "[variables('OS').sku]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "name": "[concat(variables('vmName'),'-OSdisk')]",
            "caching": "ReadWrite",
            "deleteOption": "Delete",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          }
        },
        "licenseType": "[variables('OS').license]",
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNicName'))]",
              "properties": {
                "deleteOption": "Delete",
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "condition": true,
      "comments": "Custom Script Extension runs under the LocalSystem account.",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-03-01",
      "name": "[concat(variables('vmName'),'/importClientCert')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "assignRole"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('scriptLocation')]"
          ],
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File ./',variables('scriptExe'))]"
        }
      }
    },
    {
      "condition": false,
      "name": "[concat(variables('vmName'),'/instAzPwsh')]",
      "type": "Microsoft.Compute/virtualMachines/runCommands",
      "location": "[parameters('location')]",
      "apiVersion": "2023-03-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions',variables('vmName'),'importClientCert')]"
      ],
      "properties": {
        "source": {
          //   "script": "Install-PackageProvider -Name NuGet -Confirm:$false -Force; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force; Install-Module -Name Az -Repository PSGallery -Force;"
          "script": "$pwdCert= Get-Content -Path 'C:\\cert\\certpwd.txt';$pwdCertSecString = ConvertTo-SecureString $pwdCert -AsPlainText -Force; Import-PfxCertificate -Password $pwdCertSecString -FilePath 'C:\\cert\\certClient3.pfx' -CertStoreLocation Cert:\\CurrentUser\\My"
        },
        "timeoutInSeconds": 60,
        "treatFailureAsDeploymentFailure": false,
        "runAsUser": "[parameters('adminUsername')]",
        "runAsPassword": "[parameters('adminPassword')]"
      }
    },
    {
      
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-09-01",
      "name": "assignRole",
      "resourceGroup": "[parameters('storageAccountResourceGroupName')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines',variables('vmName'))]"
        
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "storageAccountResourceGroupName": {
            "value": "[parameters('storageAccountResourceGroupName')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "assignedRoleDefinitionId": {
            "value": "[variables('roleDefinitionId')[parameters('msiRole')]]"
          },
          "principalId": {
            "value": "[reference(variables('vmName'),'2019-07-01', 'Full').identity.principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "storageAccountResourceGroupName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "assignedRoleDefinitionId": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "roleName": "[guid(parameters('assignedRoleDefinitionId'), parameters('principalId'), parameters('storageAccountName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
              "apiVersion": "2018-09-01-preview",
              "name": "[concat(parameters('storageAccountName'), '/Microsoft.Authorization/', variables('roleName') )]",
              "properties": {
                "roleDefinitionId": "[parameters('assignedRoleDefinitionId')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {}
        }
      }
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "hostname": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('vmName'))).osProfile.computerName]"
    }
  }
}