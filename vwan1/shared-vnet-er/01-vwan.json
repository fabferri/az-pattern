{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "hub1location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location where all resources will be created."
            }
        },
        "vwanName": {
            "type": "string",
            "defaultValue": "vwan1",
            "metadata": {
                "description": "Name of the Virtual Wan."
            }
        },
        "vwanSKU": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "Sku of the Virtual Wan."
            },
            "allowedValues": [
                "Standard",
                "Basic"
            ]
        },
        "hub1Name": {
            "type": "string",
            "defaultValue": "hub1",
            "metadata": {
                "description": "Name of the Virtual Hub. A virtual hub is created inside a virtual wan."
            }
        },
        "hub1_ExpressRouteGatewayScaleUnit": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Scale Units for Express Route Gateway in the first Hub"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "admin username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "admin password for the VMs"
            }
        }
    },
    "variables": {
        "vwanName": "[parameters('vwanName')]",
        "hub1Name": "[parameters('hub1Name')]",
        "hub1location": "[parameters('hub1location')]",
        "hub1addressPrefix": "10.255.0.0/23",

        "fwvnetName": "fwvnet",
        "nvavnetName": "nvavnet",
        "spoke1vnetName": "spoke1",
        "spoke2vnetName": "spoke2",
        "nvavnet": {
            "location": "[variables('hub1location')]",
            "name": "[variables('nvavnetName')]",
            "addressPrefix1": "10.0.20.0/24",
            "backendName": "backend",
            "backendPrefix": "10.0.20.0/27",
            "frontendName": "frontend",
            "frontendPrefix": "10.0.20.32/27"
        },
        "spoke1vnet": {
            "location": "[variables('hub1location')]",
            "name": "[variables('spoke1vnetName')]",
            "addressPrefix1": "10.0.1.0/24",
            "subnet1Name": "subnet1",
            "subnet1Prefix": "10.0.1.0/25"
        },
        "spoke2vnet": {
            "location": "[variables('hub1location')]",
            "name": "[variables('spoke2vnetName')]",
            "addressPrefix1": "10.0.2.0/24",
            "subnet1Name": "subnet1",
            "subnet1Prefix": "10.0.2.0/25"
        },

        "hub1connectionNamenva": "[concat(variables('nvavnetName'),'-conn')]",
        "hub1connectionNamespoke1": "[concat(variables('spoke1vnetName'),'-conn')]",
        "hub1connectionNamespoke2": "[concat(variables('spoke2vnetName'),'-conn')]",

        "vmSize": "Standard_B1s",
        "adminUsername": "[parameters('adminUsername')]",
        "adminPassword": "[parameters('adminPassword')]",
        "linux_nginx_install": "sleep 10 && sudo apt -y update && apt -y install nginx && systemctl enable nginx && systemctl start nginx",
        "linux_custompage1": "echo '<style> h1 { color: blue; } </style> <h1>' > /var/www/html/index.nginx-debian.html",
        "linux_custompage2": "cat /etc/hostname >> /var/www/html/index.nginx-debian.html",
        "linux_custompage3": "echo ' </h1>' >> /var/www/html/index.nginx-debian.html",
        "linux_nginx": "[concat(variables('linux_nginx_install'),' && ', variables('linux_custompage1'),' && ', variables('linux_custompage2'),' && ', variables('linux_custompage3'))]",
        "linux_ipforwarding": "sudo echo 'net.ipv4.conf.all.forwarding=1' | tee -a /etc/sysctl.conf  && echo 'net.ipv4.conf.default.forwarding=1' | tee -a /etc/sysctl.conf  && sudo sysctl -p",
        "linux_fw": "[concat(variables('linux_nginx'),' && ', variables('linux_ipforwarding') )]",
        "vmArray": [
            {
                "vmName": "nva",
                "location": "[variables('nvavnet').location]",
                "vmSize": "[variables('vmSize')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vnetName": "[variables('nvavnet').name]",
                "subnetName": "[variables('nvavnet').backendName]",
                "privIP": "10.0.20.10",
                "pubIPName": "nva-pubIP",
                "ipforwarding": false,
                "nsgName": "nva-nsg",
                "cmd": "[variables('linux_nginx')]"
            },
            {
                "vmName": "vm1",
                "location": "[variables('spoke1vnet').location]",
                "vmSize": "[variables('vmSize')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vnetName": "[variables('spoke1vnet').name]",
                "subnetName": "[variables('spoke1vnet').subnet1Name]",
                "privIP": "10.0.1.10",
                "pubIPName": "vm1-pubIP",
                "ipforwarding": false,
                "nsgName": "vm1-nsg",
                "cmd": "[variables('linux_nginx')]"
            },
            {
                "vmName": "vm2",
                "location": "[variables('spoke2vnet').location]",
                "vmSize": "[variables('vmSize')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vnetName": "[variables('spoke2vnet').name]",
                "subnetName": "[variables('spoke2vnet').subnet1Name]",
                "privIP": "10.0.2.10",
                "pubIPName": "vm2-pubIP",
                "ipforwarding": false,
                "nsgName": "vm2-nsg",
                "cmd": "[variables('linux_nginx')]"
            }
        ],
        "vmCount": "[length(variables('vmArray'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('nvavnet').name]",
            "apiVersion": "2022-05-01",
            "location": "[variables('nvavnet').location]",
            "dependsOn": [],
            "comments": "This is the nva vnet",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('nvavnet').addressPrefix1]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('nvavnet').backendName]",
                        "properties": {
                            "addressPrefix": "[variables('nvavnet').backendPrefix]"
                        }
                    },
                    {
                        "name": "[variables('nvavnet').frontendName]",
                        "properties": {
                            "addressPrefix": "[variables('nvavnet').frontendPrefix]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('spoke1vnet').name]",
            "apiVersion": "2022-05-01",
            "location": "[variables('spoke1vnet').location]",
            "dependsOn": [],
            "comments": "This is the spoke1 vnet",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('spoke1vnet').addressPrefix1]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('spoke1vnet').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('spoke1vnet').subnet1Prefix]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('spoke2vnet').name]",
            "apiVersion": "2022-05-01",
            "location": "[variables('spoke2vnet').location]",
            "dependsOn": [],
            "comments": "This is the spoke2 vnet",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('spoke2vnet').addressPrefix1]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('spoke2vnet').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('spoke2vnet').subnet1Prefix]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualWans",
            "name": "[variables('vwanName')]",
            "apiVersion": "2022-05-01",
            "location": "[variables('hub1location')]",
            "properties": {
                "type": "[parameters('vwanSKU')]"
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs",
            "name": "[variables('hub1Name')]",
            "apiVersion": "2022-05-01",
            "location": "[variables('hub1location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualWans', variables('vwanName'))]"
            ],
            "properties": {
                "addressPrefix": "[variables('hub1addressPrefix')]",
                "virtualWan": {
                    "id": "[resourceId('Microsoft.Network/virtualWans',variables('vwanName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs/hubRouteTables",
            "apiVersion": "2022-05-01",
            "name": "[concat(variables('hub1Name'), '/', 'defaultRouteTable')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs', variables('hub1Name'))]"
            ],
            "properties": {
                "labels": [ "default" ]
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs/hubRouteTables",
            "apiVersion": "2022-05-01",
            "name": "[concat(variables('hub1Name'), '/', 'RT_SHARED')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs', variables('hub1Name'))]"
            ],
            "properties": {
                "labels": []
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs/hubRouteTables",
            "apiVersion": "2022-05-01",
            "name": "[concat(variables('hub1Name'), '/', 'RT_SPOKE')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs', variables('hub1Name'))]"
            ],
            "properties": {
                "labels": []
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
            "name": "[format('{0}/{1}', variables('hub1Name'), variables('hub1connectionNamenva'))]",
            "apiVersion": "2022-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'defaultRouteTable')]",
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SHARED')]",
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SPOKE')]"
            ],
            "properties": {
                "routingConfiguration": {
                    "associatedRouteTable": {
                        "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SHARED')]"
                    },
                    "propagatedRouteTables": {
                        "ids": [
                            {
                                "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SPOKE')]"
                            },
                            {
                                "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'defaultRouteTable')]"
                            }
                        ],
                        "labels": []
                    },
                    "vnetRoutes": {
                        "staticRoutes": []
                    }
                },
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('nvavnet').name)]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
            "apiVersion": "2022-05-01",
            "name": "[format('{0}/{1}', variables('hub1Name'), variables('hub1connectionNamespoke1'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SPOKE')]",
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SHARED')]",
                "[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('hub1Name'), variables('hub1connectionNamenva'))]"
            ],
            "properties": {
                "routingConfiguration": {
                    "associatedRouteTable": {
                        "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SPOKE')]"
                    },
                    "propagatedRouteTables": {
                        "ids": [
                            {
                                "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SHARED')]"
                            }
                        ],
                        "labels": []
                    },
                    "vnetRoutes": {
                        "staticRoutes": []
                    }
                },
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('spoke1vnet').name)]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
            "apiVersion": "2022-05-01",
            "name": "[format('{0}/{1}', variables('hub1Name'), variables('hub1connectionNamespoke2'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SPOKE')]",
                "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SHARED')]",
                "[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('hub1Name'), variables('hub1connectionNamespoke1'))]"
            ],
            "properties": {
                "routingConfiguration": {
                    "associatedRouteTable": {
                        "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SPOKE')]"
                    },
                    "propagatedRouteTables": {
                        "ids": [
                            {
                                "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', variables('hub1Name'), 'RT_SHARED')]"
                            }
                        ],
                        "labels": []
                    },
                    "vnetRoutes": {
                        "staticRoutes": []
                    }
                },
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('spoke2vnet').name)]"
                }
            }
        },
        {
            "type": "Microsoft.Network/expressRouteGateways",
            "apiVersion": "2020-05-01",
            "name": "[format('{0}_ERGW', variables('hub1Name'))]",
            "location": "[variables('hub1location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('hub1Name'), variables('hub1connectionNamespoke2'))]"
            ],
            "properties": {
                "virtualHub": {
                    "id": "[resourceId('Microsoft.Network/virtualHubs', variables('hub1Name'))]"
                },
                "autoScaleConfiguration": {
                    "bounds": {
                        "min": "[parameters('hub1_ExpressRouteGatewayScaleUnit')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('vmArray')[copyIndex()].nsgName]",
            "apiVersion": "2022-05-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH-rule",
                        "properties": {
                            "description": "allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 300,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "copy": {
                "name": "nsgCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('vmArray')[copyIndex()].pubIPName]",
            "apiVersion": "2022-05-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "comments": "Public IP address VMs",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            },
            "copy": {
                "name": "publicIpCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat( variables('vmArray')[copyIndex()].vmName,'-nic' )]",
            "apiVersion": "2020-05-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "comments": "NIC of the VMs",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses',variables('vmArray')[copyIndex()].pubIPName )]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vmArray')[copyIndex()].vnetName)]",
                "[resourceId('Microsoft.Network/networkSecurityGroups',variables('vmArray')[copyIndex()].nsgName)]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('vmArray')[copyIndex()].privIP]",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmArray')[copyIndex()].pubIPName  )]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vmArray')[copyIndex()].vnetName, variables('vmArray')[copyIndex()].subnetName)]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('vmArray')[copyIndex()].nsgName  )]"
                },
                "enableIPForwarding": "[variables('vmArray')[copyIndex()].ipforwarding]"
            },
            "copy": {
                "name": "nicCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmArray')[copyIndex()].vmName]",
            "apiVersion": "2022-08-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmArray')[copyIndex()].vmName,'-nic')  )]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmArray')[copyIndex()].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('vmArray')[copyIndex()].vmName]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('vmArray')[copyIndex()].publisher]",
                        "offer": "[variables('vmArray')[copyIndex()].offer]",
                        "sku": "[variables('vmArray')[copyIndex()].sku]",
                        "version": "[variables('vmArray')[copyIndex()].version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "name": "[concat(variables('vmArray')[copyIndex()].vmName,'-OS')]"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat( variables('vmArray')[copyIndex()].vmName,'-nic')  )]"
                        }
                    ]
                }
            },
            "copy": {
                "name": "nodeCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "comments": "custom script extension to configure the application VMs through a bash script",
            "condition": "[greater(length(variables('vmArray')[copyIndex()].cmd), 0)]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2022-03-01",
            "name": "[concat(variables('vmArray')[copyIndex()].vmName, '/', 'vmCustomScript')]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "copy": {
                "name": "vmScriptCopy",
                "count": "[variables('vmCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmArray')[copyIndex()].vmName )]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "[variables('vmArray')[copyIndex()].cmd]"
                }
            }
        }
    ]
}